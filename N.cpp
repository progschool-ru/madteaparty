/*

Этап 1.
Выполнил участник N.

- Показывает пользователю сколько осталось
- Запрашивает число
- Уменьшает сколько осталось и так далее
- Выходит, когда ничего не останется
- Нельзя ходить меньше чем 2 и больше чем 4


Этап 2.
Выполнил участник E.

Останавливаем игру, когда осталось неотрицательное число, но взять ничего нельзя.
Показываем, кто ходит: первый или второй.
Финальное поздравление, где написано кто выиграл: первый или второй. Выигрывает тот, кто последним ходил.


Этап 3.
Выполнил участник М.

- Игрок не может взять больше, чем лежит в куче.
- В конфигурационном файле conf.txt задано сколько лежит в куче, min и max.
- Программа читает эту конфигурацию перед запуском и играет.
- Если конфигурация противоречива,
    выводим на экран информацию о том, что не понравилось,
    сразу после этого выходим


Этап 4.
Прислать до 22:00 вторника 3 января

- Если обнаружили, что файла нет, то создаём example файл с какой-то конфигурацией
- Второй игрок - комп. Ходит как-то: всегда какое-то допустимое число.
- Исправить известные проблемы.


Известные проблемы:

- Обнаружил С. В.:
    не читает из конфига общее количество камней.

Добавляйте сюда проблемы о которых вы знаете, но не смогли или не успели решить.



*/

#include<stdio.h>
int main()
{
    int start=30,c=1,player;
    int min;
    int max;
    FILE *f;
    f=fopen("conf.txt","rt");
    fscanf(f,"%d%d",&min, &max);
    fclose(f);
    if(min>max  ||  min<=0  || max<=0)
    {
    printf("Error in file");
    }
    else{
        while(start>=min)
    {
         if (c%2==1)
        player=1;
        else
        player=2;
        printf("Available: %d\n",start);
        int b;
        printf ("Turn player %d: ",player);
        scanf("%d",&b);
        while (b<min || b>max || start<b)
        {
            printf("Invalid input.\n");
            printf ("Turn player %d: ",player);
            scanf("%d",&b);
        }
        start=start-b;
        c++;
    }
    printf("The end of the game. Left: %d. %d player win!",start,player);
    }
}
