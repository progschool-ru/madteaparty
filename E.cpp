/*

Этап 1.
Выполнил участник E.

- Показывает пользователю сколько осталось
- Запрашивает число
- Уменьшает сколько осталось и так далее
- Выходит, когда ничего не останется
- Нельзя ходить меньше чем 2 и больше чем 4


Этап 2.
Выполнил участник С.

Останавливаем игру, когда осталось неотрицательное число, но взять ничего нельзя.
Показываем, кто ходит: первый или второй.
Финальное поздравление, где написано кто выиграл: первый или второй. Выигрывает тот, кто последним ходил.


Этап 3.
Выполнил участник N.

- Игрок не может взять больше, чем лежит в куче.
- В конфигурационном файле conf.txt задано сколько лежит в куче, min и max.
- Программа читает эту конфигурацию перед запуском и играет.
- Если конфигурация противоречива,
    выводим на экран информацию о том, что не понравилось,
    сразу после этого выходим


Этап 4.
Выполнил участник C.

- Если обнаружили, что файла нет, то создаём example файл с какой-то конфигурацией
- Второй игрок - комп. Ходит как-то: всегда какое-то допустимое число.


Этап 5.
Выполнил участник M.

- Комп старается выиграть:
    если может, ходит правильно,
    если не может, ходит как-то: какое-то допустимое число.
- В конфиге можно задать, кто первый, кто второй:
    комп, чел, два компа, два чела.
- Пусть создаётся не test.txt, а сразу conf.txt


Этап 6.
Выполнил участник K.

- Тестируем, исправляем ошибки.
- Смотрим код, выискиваем потенциальные ошибки, тестируем, исправляем.
- Улучшаем пользовательский интерфейс на своё усмотрение, но оставляя его текстовым.


Этап 7.
Прислать до 22:00 вторника 10 января

- Избавьтесь от импорта ненужных библиотек.
- Тестируем, исправляем ошибки.
- Смотрим код, выискиваем потенциальные ошибки, тестируем, исправляем.
- Улучшаем пользовательский интерфейс на своё усмотрение, но оставляя его текстовым.

Известные проблемы:

- Обнаружил участник M, исправил участник K:
    Не сделан выбор, кто компьютер, а кто человек.
- Обнаружил участник К, исправил участник К:
    Компьютер может взять больше чем осталось в куче.
 
Добавляйте сюда проблемы о которых вы знаете, но не смогли или не успели решить.




*/

#include <stdio.h>
#include <fstream>
#include <iostream>
#include <stdlib.h>
#include <time.h>

using namespace std;

bool check_config(int n, int min, int max)
{
    if (n < min)
    {
        printf("Min must not be greater than total number\n");
        return 0;
    }
    if (n <= 0)
    {
        printf("Total must be positive\n");
        return 0;
    }
    if (min <= 0)
    {
        printf("Min must be positive\n");
        return 0;
    }
    if (max <= 0)
    {
        printf("Max must be positive\n");
        return 0;
    }
    if (min > max)
    {
        printf("Min must not be greater than max\n");
        return 0;
    }
    return 1;
}


int main()
{
	srand(time(NULL));
	int i,a,min,max;
	int isComp[3];
	FILE *f=fopen("conf.txt","rt");
	if(f == NULL){
		ofstream fout;
		fout.open("conf.txt");
		mingen:
			min=rand()%8+1;
			max=rand()%10+1;//max
			if(min>max) goto mingen;
		colgen:
			i=rand()%50+1;//col
			if(i<=max) goto colgen;
		fout<<i << " " << min << " " << max << endl;
		fout << "0 1" << endl;
		fout.close();
	} //coздать и заполнить
	else
	{
		FILE *f=fopen("conf.txt","rt");
		fscanf(f,"%d%d%d%d%d",&i,&min,&max, &isComp[1], &isComp[2]);
		fclose(f);
	}

	if (!check_config(i, min, max))
	{
		printf("Error\n");
		return 1;
	}
	printf("Avalable %d\n",i);
	int curturn=1;
	while (i>=min)
	{
		printf("%d", curturn);
		printf (" turn\n");

		if (1 == isComp[curturn]) {
			int r = i%(min+max);
			if (r >= max)
			{
				a = max;
			}
			else if (r >= min)
			{
				a = r;
			}
			else
			{
				a=rand()%(max-min)+min;
			}
			printf("%d\n", a);
		} 
		else
		{
		  scanf ("%d",&a);  
		} 
		if (min <=a && a <= max && a <= i)
		{
	    	i=i-a;
		    printf ("Avalable %d\n",i);
			curturn = 3 - curturn;
	    }
	    else
		{
			printf ("invalid input\n");
		}
	}
	printf("The end. %d wins\n", 3 - curturn);
}
