/*

Этап 1.
Выполнил участник E.

- Показывает пользователю сколько осталось
- Запрашивает число
- Уменьшает сколько осталось и так далее
- Выходит, когда ничего не останется
- Нельзя ходить меньше чем 2 и больше чем 4


Этап 2.
Выполнил участник С.

Останавливаем игру, когда осталось неотрицательное число, но взять ничего нельзя.
Показываем, кто ходит: первый или второй.
Финальное поздравление, где написано кто выиграл: первый или второй. Выигрывает тот, кто последним ходил.


Этап 3.
Выполнил участник N.

- Игрок не может взять больше, чем лежит в куче.
- В конфигурационном файле conf.txt задано сколько лежит в куче, min и max.
- Программа читает эту конфигурацию перед запуском и играет.
- Если конфигурация противоречива,
    выводим на экран информацию о том, что не понравилось,
    сразу после этого выходим


Этап 4.
Выполнил участник C.

- Если обнаружили, что файла нет, то создаём example файл с какой-то конфигурацией
- Второй игрок - комп. Ходит как-то: всегда какое-то допустимое число.


Этап 5.
Прислать до 22:00 четверга 5 января

- Комп старается выиграть:
    если может, ходит правильно,
    если не может, ходит как-то: какое-то допустимое число.
- В конфиге можно задать, кто первый, кто второй:
    комп, чел, два компа, два чела.
- Пусть создаётся не test.txt, а сразу conf.txt

Известные проблемы:
На данный момент известных проблем нет.
Добавляйте сюда проблемы о которых вы знаете, но не смогли или не успели решить.




*/

#include<stdio.h>
#include<io.h>
#include<fstream>
int main()
{
	int i=30,a,j,k;
	if(access("conf.txt", 0)==0){
		ofstream ofs("test.txt"); //создать
		mingen:
		j=rand()%8+1;//min
		k=rand()%10+1;//max
		if(j>k) goto mingen;
		colgen:
		i=rand()%50+1;//col
		if(i<=k) goto colgen
		fout<<i;
		fout<<" ";
		fout<<j;
		fout<<" ";
		fout<<k;
		ofs.close();
	} //coздать и заполнить

	else{FILE *f=fopen("conf.txt","rt"); fscanf(f,"%d%d%d",&i,&j,&k);}

	if(i<0)
	{
	printf("Error");
	return 1;
	}
	printf("Avalable %d\n",i);
	int curturn=1;
	while (i>=j)
	{
		printf("%d", curturn);
		printf (" turn\n");

		if(curturn==2) a=rand()%(k-j)+j;
		else scanf ("%d",&a);

		int l=0,m=0;
		while(m<=k&&m<=i)
		{
		if(m<j){}
		else if(a==m)l=1;
	    m=m+1;
		}
		if(l==1)
		{
	    	i=i-a;
		    printf ("Avalable %d\n",i);
		    if(curturn==1) curturn=2;
		    else curturn=1;
	    }
	    else
		printf ("invalid input\n");
	}
	printf("The end ");
	printf("%d", 3-curturn);
	printf(" wins");
}
